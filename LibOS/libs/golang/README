This library is added in the manifest file to the loader.preload list for an
application, after the top-level patching library. It is intended to help an
application avoid directly invoke syscall instructions that would cause
expensive enclave exits, and instead to use functionality in libsysdb.

Offline - using the 'extract' script - we locate low-level Go functions which
contain syscall. Online, we locate these symbols via the symbol table, and
inject a jmp instruction to a new implementation provided in this library that
invokes the appropriate function inside sysdb for emulation.

To protect against applications which may have altered these functions we are
replacing, or where the implementations have changed across Go versions, the
patching method compares the byte code of these functions with known byte code
collected from disassembly of various versions of the Go compiler. We
consolidate byte code implementations of each function across versions,
maintaining only those which are unique.

The appropriate C and assembly code referencing the Go byte code is
auto-generated by scripts, but added to this commit directly as new code.

Wrapper functions are implemented in assembly to replace execution of certain
Go runtime functions which invoke syscall.  A wrapper is implemented for each
system call needed, and invokes the associated function in sysdb to emulate the
kernel functionality.

Go runtime function byte code are captured, version 1.11.5

Go heap size patching supports 1.10.7 only. It seems 1.11.5+ does not
need this patching, and use of heap.c is obsolete.

Syscall wrappers have been tested with 1.10.7 and mostly with 1.11.5

To modify the Go versions encoded in this library:
1) Specify versions of Go in file 'versions'.
2) ./fetch
3) ./extract
4) make -C .. format
5) Build and commit newly generated sources
